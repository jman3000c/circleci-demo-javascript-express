version: 2.1

commands:
  install_awscli:
    description: Install AWS cli
    steps:
      - run:
          name: Install AWS cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
    - run: 
        name: Install Node.js 13.8.0
        command: |
          curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
          sudo apt install -y nodejs
          sudo npm install --global n
          sudo n 13.8.0

  install_ansible:
    description: Install Ansible
    steps:
     - run:
        name: Install Ansible
        command: |
          sudo apt update
          sudo apt install software-properties-common -y
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install ansible -y

  install_curl:
    description: Install curl with sudo
    steps:
      - run:
          name: curl installation
          command: |
             sudo apt install -y curl


  install_grep:
    description: Install grep with sudo
    steps:
    - run:
        name: grep installation
        command: |
             sudo apt install -y grep

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        # default: ${CIRCLE_WORKFLOW_ID}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations:revert
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build        
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0  
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      # Your job code here
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyze backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      # Your job code here

  deploy-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      # - run: yum install -y tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5} 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            # echo $(aws ec2 describe-instances \
            # aws ec2 describe-instances \
            # --query 'Reservations[*].Instances[*].PublicIpAddress' \
            # --filters "Name=tag:name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}"\
            # --output text) >> ~/project/.circleci/ansible/inventory.txt
            # --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

          # workflow_id: ${CIRCLE_WORKFLOW_ID:0:5} 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}      

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["5c:50:aa:85:c8:5c:33:44:17:6f:46:53:70:2a:f5:2a"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update --no-cache tar gzip ansible aws-cli
      # - attach_workspace:
      #     at: ~/
      # - run:
      #     name: Configure server
      #     command: |
      #       # add environment variables to server
      #       echo NODE_ENV=production > ~/project/backend/.env
      #       echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
      #       echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
      #       echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
      #       echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
      #       echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ~/project/backend/.env
      #       echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
      #       echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
      #       echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
      #       cat ~/project/backend/.env

      #       cd .circleci/ansible
      #       ansible-playbook -i inventory.txt configure-server.yml \
      #       --key-file ~/.ssh/id_rsa_ea4226eff0dbbedad3aecde758cf144
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/backend
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}      

  run-migrations:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      #     name: Install dependencies
      #     command: |
      #       apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # sudo npm install -g npm
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/AFtw797MiUKa7T2QyUbZBj/migration_${CIRCLE_WORKFLOW_ID:0:5}  -d '1'
            else
              echo "No Migrations are pending"
            fi
     # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}    

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      # - install_ansible
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            # apk add --update --no-cache tar gzip nodejs npm aws-cli curl
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text
            )
            # export API_URL="http://${BACKEND_IP}:3030"
            # echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            # sudo npm install -g npm@latest
            # rm -rf node_modules
            # npm run build 
            # npm audit fix --force
            # npm audit fix --audit-level=critical --force  
            npm run build
            # tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:5}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive

      # - add_ssh_keys:
      #     fingerprints:
      #       - "ea:42:26:ef:f0:db:be:da:d3:ae:cd:e7:58:cf:14:4f"
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/backend 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}
  deploy-backend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["5c:50:aa:85:c8:5c:33:44:17:6f:46:53:70:2a:f5:2a"]
      - attach_workspace:
          at: ~/
      
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*

            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            echo "Reading contents of the inventory.txt file ------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # - install_awscli
      # - install_ansible
      # - run:
      #     name: Deploy Backend
      #     command: |
      #       cd backend
      #       npm i
      #       npm run build
      #       cd ..

      #       cd .circleci/ansible
      #       mkdir files
      #       cd files
      #       tar -C ../../../backend -czvf artifact.tar.gz .
      #       cd ../

      #       echo "Contents of the inventory.txt file is -------"
      #       cat inventory.txt
      #       ansible-playbook -i inventory.txt deploy-backend.yml -vv
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert-migrations:   
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}
  smoke-test:
    docker:
      - image: cimg/python:3.10 
    steps:
      # Checkout code from git
      - checkout
      - install_grep
      - install_awscli
      - install_nodejs
      - install_curl
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo "${API_URL}"
            # if curl -s $API_URL/api/status | grep "ok"
            # if curl google.com | grep "ok"
            if curl -s --head "https://google.com"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
            echo $FRONTEND_WEBSITE
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID="the id here"
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo Old Workflow ID: $OldWorkflowID 
            if [[ "${CIRCLE_WORKFLOW_ID:0:5}" != "${OldWorkflowID}" ]]
            then
              echo "-----------------Delete Confirmed--------------------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "----------------------Cannot Cleanup------------------------"
            fi
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}" \
            --tags project=udapeople
            echo OldWorkflowID: "${OldWorkflowID}"
            echo "Current Workflow ID: ${CIRCLE_WORKFLOW_ID:0:5}"
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}

  cleanup:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Cleanup server
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]